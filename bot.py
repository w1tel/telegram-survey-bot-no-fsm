import logging
import os
import telebot
from typing import TypedDict, Dict, Tuple
from telebot.types import Message
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
from dotenv import load_dotenv
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import telebot.util
from helpers import get_key

load_dotenv()

logger = telebot.logger
telebot.logger.setLevel(logging.INFO)

class UserState(TypedDict):
    step: str | None
    data: Dict[str, str]

users: Dict[Tuple[int, int], UserState] = {}
bot = telebot.TeleBot(os.getenv("TOKEN", ""))
ADMINS = os.getenv("ADMINS", "").split(sep=',')
print(ADMINS)

@bot.message_handler(commands=["start"])
def start(message: Message):
    key = get_key(message)
    if str(message.chat.id) in ADMINS:
        bot.send_message(chat_id=ADMINS[0], text='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω!')
        return
    bot.send_message(chat_id=message.chat.id, text="–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º –æ–ø—Ä–æ—Å")
    users[key] = {"step": "name", "data": {}}
    bot.send_message(chat_id=message.chat.id, text="–í–∞—à–µ –∏–º—è")
    print(message.chat.id)
@bot.message_handler(commands=["cancel"])
def cancel(message):
    key = get_key(message)
    if key in users:
        users.pop(key, None)
        bot.send_message(message.chat.id, "–û–ø—Ä–æ—Å –æ—Ç–º–µ–Ω—ë–Ω")
    else:
        bot.send_message(message.chat.id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã")

@bot.message_handler(content_types=["text", "contact"])
def common_handler(message: Message):
    key = get_key(message)
    if key not in users:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –æ–ø—Ä–æ—Å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start")
        return

    if users[key]['step'] == 'name':
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        users[key]["data"].update({'name': message.text})
        users[key]["step"] = 'phone'
        kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        btn_contact = KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True)
        kb.add(btn_contact)

        bot.send_message(
            message.chat.id,
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç",
            reply_markup=kb)

    elif users[key]['step'] == 'phone':
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä (contact –∏–ª–∏ —Ç–µ–∫—Å—Ç)
        contact = None
        if message.contact and getattr(message.contact, "phone_number", None):
            contact = message.contact.phone_number
        else:
            contact = message.text
        users[key]["data"].update({'phone': contact})
        users[key]["step"] = 'product'
        bot.send_message(message.chat.id, f"–°–ø–∞—Å–∏–±–æ! –í–∞—à –Ω–æ–º–µ—Ä: {contact}", reply_markup=telebot.types.ReplyKeyboardRemove())
        bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –∑–∞–∫–∞–∑–∞—Ç—å")

    elif users[key]['step'] == 'product':
        product = message.text
        users[key]["data"].update({'product': product})

        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è HTML
        html_text = (
        f"<b>üìã –ò—Ç–æ–≥–∏ –æ–ø—Ä–æ—Å–∞:</b>\n\n"
        f"<b>–ò–º—è:</b> {users[key]['data']['name']}\n"
        f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {users[key]['data']['phone']}\n"
        f"<b>–ñ–µ–ª–∞–µ–º—ã–π —Ç–æ–≤–∞—Ä:</b> {users[key]['data']['product']}")

        markup = InlineKeyboardMarkup()
        btn_confirm = InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_survey")
        btn_edit = InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data="edit_name")
        btn_site = InlineKeyboardButton("üåê –û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç", url="https://example.com")
        markup.add(btn_confirm, btn_edit)
        markup.add(btn_site)

        bot.send_message(message.chat.id, html_text, parse_mode="HTML", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data in ("confirm_survey", "edit_name"))
def handle_callbacks(call):
    key = get_key(call)

    if call.data == "confirm_survey":
        bot.answer_callback_query(call.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ!")
        # –ë–µ—Ä—ë–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏ –æ—á–∏—â–∞–µ–º —Å—Ç–µ–π—Ç

        final_text = (
            "<b>–°–ø–∞—Å–∏–±–æ</b>\n\n"
            "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.\n\n"
            f"<b>–ò–º—è:</b> {users[key]['data']['name']}\n"
            f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {users[key]['data']['phone']}\n"
            f"<b>–¢–æ–≤–∞—Ä:</b> {users[key]['data']['product']}"
        )
        bot.send_message(ADMINS[0], text=final_text, parse_mode='HTML')
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–±–∏—Ä–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        try:
            bot.edit_message_text(final_text,
                                  chat_id=call.message.chat.id,
                                  message_id=call.message.message_id,
                                  parse_mode="HTML")
        except Exception:
            bot.send_message(call.message.chat.id, final_text, parse_mode="HTML")

    elif call.data == "edit_name":
        bot.answer_callback_query(call.id, "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏")
        try:
            bot.edit_message_reply_markup(chat_id=call.message.chat.id,
                                          message_id=call.message.message_id,
                                          reply_markup=None)
        except Exception:
            pass

        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —à–∞–≥ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
        users.setdefault(key, {"step": None, "data": {}})
        users[key]["step"] = "name"
        users[key]["data"].pop("name", None)

        bot.send_message(call.message.chat.id, "–•–æ—Ä–æ—à–æ. –í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–æ–≤–æ–µ –∏–º—è:")

def main():
    me = bot.get_me()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: @%s (id=%s)", me.username, me.id)
    bot.infinity_polling()

if __name__ == "__main__":
    main()
