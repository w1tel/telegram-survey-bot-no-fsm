import logging
import os, telebot
from typing import TypedDict, Dict, Tuple
from telebot.types import Message
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
from dotenv import load_dotenv
load_dotenv()


logger = telebot.logger
telebot.logger.setLevel(logging.INFO)


class UserState(TypedDict):
    step: str | None  # —Ç–µ–∫—É—â–∏–π —ç—Ç–∞–ø (¬´name¬ª/¬´phone¬ª/¬´product¬ª)
    data: Dict[str, str]  # –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã


users: Dict[Tuple[int, int], UserState] = {}  # –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
bot = telebot.TeleBot(os.getenv("TOKEN", ""))


@bot.message_handler(commands=["start"])
def start(message):
    bot.send_message(chat_id=message.chat.id, text="–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º –æ–ø—Ä–æ—Å")
    users[(message.chat.id, message.from_user.id)] = {"step": "name", "data": {}}
    key = (message.chat.id, message.from_user.id)
    users[key]['step'] = 'name'
    bot.send_message(chat_id=message.chat.id, text="–í–∞—à–µ –∏–º—è")

@bot.message_handler(content_types=["text", "contact"])
def common_handler(message: Message):
    key = (message.chat.id, message.from_user.id)
    if users[key]['step'] == 'name':
        users[key]["data"].update({'name': message.text})
        users[key]["step"] = 'phone'
        kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        btn_contact = KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True)
        kb.add(btn_contact)
        
        bot.send_message(
            message.chat.id,
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç",
            reply_markup=kb)
    elif users[key]["step"] == 'phone':
        contact = message.contact.phone_number
        bot.send_message(message.chat.id, f"–°–ø–∞—Å–∏–±–æ! –í–∞—à –Ω–æ–º–µ—Ä: {contact}")
        users[key]["step"] = 'product'
        users[key]["data"].update({'phone': contact})
        bot.send_message(message.chat.id, f"–ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ–±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å")
    elif users[key]["step"] == 'product':
        product = message.text
        users[key]["data"].update({'product': product})
        html_text = (
        f"<b>üìã –ò—Ç–æ–≥–∏ –æ–ø—Ä–æ—Å–∞:</b>\n\n"
        f"<b>–ò–º—è:</b> {users[key]["data"]['name']}\n"
        f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {users[key]["data"]['phone']}\n"
        f"<b>–ñ–µ–ª–∞–µ–º—ã–π —Ç–æ–≤–∞—Ä:</b> {users[key]["data"]['product']}")
        bot.send_message(message.chat.id, html_text, parse_mode="HTML")

def main():
    me = bot.get_me()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: @%s (id=%s)", me.username, me.id)
    bot.infinity_polling()


if __name__ == "__main__":
    main()
