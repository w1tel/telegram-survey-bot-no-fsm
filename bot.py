import logging
import os, telebot
from typing import TypedDict, Dict, Tuple
from telebot.types import Message
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
from dotenv import load_dotenv
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
load_dotenv()

logger = telebot.logger
telebot.logger.setLevel(logging.INFO)

class UserState(TypedDict):
    step: str | None
    data: Dict[str, str]  

users: Dict[Tuple[int, int], UserState] = {}
bot = telebot.TeleBot(os.getenv("TOKEN", ""))

@bot.message_handler(commands=["start"])
def start(message):
    bot.send_message(chat_id=message.chat.id, text="–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º –æ–ø—Ä–æ—Å")
    users[(message.chat.id, message.from_user.id)] = {"step": "name", "data": {}}
    key = (message.chat.id, message.from_user.id)
    users[key]['step'] = 'name'
    bot.send_message(chat_id=message.chat.id, text="–í–∞—à–µ –∏–º—è")

@bot.message_handler(commands=["cancel"])
def cancel(message):
    key = (message.chat.id, message.from_user.id)
    if key in users:
        users.pop(key, None)
        bot.send_message(message.chat.id, "–û–ø—Ä–æ—Å –æ—Ç–º–µ–Ω—ë–Ω")
    else:
        bot.send_message(message.chat.id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã")

@bot.message_handler(content_types=["text", "contact"])
def common_handler(message: Message):
    key = (message.chat.id, message.from_user.id)
    if key not in users:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –æ–ø—Ä–æ—Å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start")
        return

    if users[key]['step'] == 'name':
        users[key]["data"].update({'name': message.text})
        users[key]["step"] = 'phone'
        kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        btn_contact = KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True)
        kb.add(btn_contact)
        
        bot.send_message(
            message.chat.id,
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç",
            reply_markup=kb)
    elif users[key]["step"] == 'phone':
        contact = message.contact.phone_number
        bot.send_message(message.chat.id, f"–°–ø–∞—Å–∏–±–æ! –í–∞—à –Ω–æ–º–µ—Ä: {contact}", reply_markup=telebot.types.ReplyKeyboardRemove())
        users[key]["step"] = 'product'
        users[key]["data"].update({'phone': contact})
        bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –∑–∞–∫–∞–∑–∞—Ç—å")
    elif users[key]["step"] == 'product':
        product = message.text
        users[key]["data"].update({'product': product})
        html_text = (
        f"<b>üìã –ò—Ç–æ–≥–∏ –æ–ø—Ä–æ—Å–∞:</b>\n\n"
        f"<b>–ò–º—è:</b> {users[key]['data']['name']}\n"
        f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {users[key]['data']['phone']}\n"
        f"<b>–ñ–µ–ª–∞–µ–º—ã–π —Ç–æ–≤–∞—Ä:</b> {users[key]['data']['product']}")

        markup = InlineKeyboardMarkup()
        btn = InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_survey")
        markup.add(btn)

        bot.send_message(message.chat.id, html_text, parse_mode="HTML", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "confirm_survey")
def handle_confirmation(call):
    bot.answer_callback_query(call.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ!")
    bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=None)
    bot.send_message(call.message.chat.id, "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.")
    # optionally clear user state
    key = (call.message.chat.id, call.from_user.id)
    users.pop(key, None)

def main():
    me = bot.get_me()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: @%s (id=%s)", me.username, me.id)
    bot.infinity_polling()

if __name__ == "__main__":
    main()
